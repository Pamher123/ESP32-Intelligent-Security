  #include <Arduino.h>
  #include <WiFi.h>
  #include <WiFiMulti.h>
  #include <WiFiClient.h>
  #include "OV7670.h"
  #include "BMP.h"
  #include <TFT_eSPI.h> // TFT 屏幕库
  #include <HTTPClient.h>



  WiFiClient espClient;

  // ====== 摄像头 GPIO 定义 ======
  const int SIOD = 21; // SDA
  const int SIOC = 22; // SCL
  const int VSYNC = 34;
  const int HREF = 35;
  const int XCLK = 32;
  const int PCLK = 33;
  const int D0 = 27;
  const int D1 = 17;
  const int D2 = 16;
  const int D3 = 15;
  const int D4 = 14;
  const int D5 = 13;
  const int D6 = 12;
  const int D7 = 4;

  // ====== WIFI 配置 ======
  const char *g_ssid = "MyWIFI";
  const char *g_password = "Aa123123";
  WiFiClient g_espclient;
  WiFiServer server(80);

  // 摄像头实例
  OV7670 *camera;
  unsigned char bmpHeader[BMP::headerSize];

  // TFT 显示屏
  TFT_eSPI tft = TFT_eSPI(); // 创建 TFT 屏幕对象

  // 初始化 Web 服务器
  void startWebServer()
  {
    server.begin();
    Serial.println("Http web server started.");
  }

  // 连接 WiFi
  void connectWifi()
  {
    WiFi.mode(WIFI_STA);
    WiFi.begin(g_ssid, g_password);
    WiFi.setSleep(false);
    while (WiFi.status() != WL_CONNECTED)
    {
      delay(500);
      Serial.print(".");
    }
    Serial.println("\nWiFi Connected!");
    Serial.print("IP地址: ");
    Serial.println(WiFi.localIP());
  }


  // 发送给服务器
  void sendToServer()
  {
    if (WiFi.status() != WL_CONNECTED) {
      Serial.println("WiFi未连接，无法上传");
      return;
    }

    Serial.println("开始上传图片到服务器...");
    Serial.println("本机IP: " + WiFi.localIP().toString());
    Serial.println("目标服务器: http://192.168.184.65:8000/upload");
    
    // 先测试网络连接
    WiFiClient testClient;
    if (!testClient.connect("192.168.184.65", 8000)) {
      Serial.println("WiFi 本机 IP   : " + WiFi.localIP().toString());
      Serial.println("WiFi 网关      : " + WiFi.gatewayIP().toString());
    Serial.println("子网掩码        : " + WiFi.subnetMask().toString());
      Serial.println("无法连接到服务器 192.168.184.65:8000");
      Serial.println("请检查：");
      Serial.println("1. 电脑防火墙是否阻止了8000端口");
      Serial.println("2. 后端服务器是否运行在0.0.0.0:8000而不是localhost:8000");
      Serial.println("3. ESP32和电脑是否在同一网络");
      return;
    }
    testClient.stop();
    Serial.println("网络连接测试成功");
    
    WiFiClient client;
    HTTPClient http;
    
    // 确保获取最新的一帧
    camera->oneFrame();
    
    http.begin(client, "http://192.168.184.65:8000/upload");
    http.addHeader("Content-Type", "application/octet-stream");
    http.addHeader("User-Agent", "ESP32-Camera");
    http.setTimeout(15000); // 15秒超时
    
    // 计算完整图片大小（包含BMP头）
    int headerSize = BMP::headerSize;
    int imageDataSize = camera->xres * camera->yres * 2;
    int totalSize = headerSize + imageDataSize;
    
    // 创建完整的BMP数据
    uint8_t* fullImage = (uint8_t*)malloc(totalSize);
    if (fullImage == NULL) {
      Serial.println("内存分配失败");
      http.end();
      return;
    }
    
    // 复制BMP头和图像数据
    memcpy(fullImage, bmpHeader, headerSize);
    memcpy(fullImage + headerSize, camera->frame, imageDataSize);
    
    Serial.printf("准备上传 %d 字节数据 (头部:%d + 图像:%d)\n", totalSize, headerSize, imageDataSize);
    
    int httpResponseCode = http.POST(fullImage, totalSize);
    
    Serial.printf("POST响应码: %d\n", httpResponseCode);
    
    if (httpResponseCode > 0) {
      String response = http.getString();
      Serial.println("服务器响应: " + response);
      
      if (httpResponseCode == 200) {
        Serial.println("✅ 图片上传成功！");
      } else {
        Serial.printf("❌ 上传失败，HTTP响应码: %d\n", httpResponseCode);
      }
    } else {
      Serial.printf("❌ 请求失败，错误码: %d\n", httpResponseCode);
      
      // 解释常见错误码
      switch(httpResponseCode) {
        case -1:
          Serial.println("连接失败 - 服务器无响应或网络问题");
          break;
        case -2:
          Serial.println("发送请求头失败");
          break;
        case -3:
          Serial.println("发送请求体失败");
          break;
        case -4:
          Serial.println("服务器连接丢失");
          break;
        case -5:
          Serial.println("读取响应失败");
          break;
        case -6:
          Serial.println("连接超时");
          break;
        default:
          Serial.println("未知错误");
      }
      
      Serial.println("\n🔧 故障排除建议：");
      Serial.println("1. 确认后端服务器运行命令：");
      Serial.println("   node server.js 或类似命令");
      Serial.println("2. 确认服务器监听地址是 0.0.0.0:8000 而不是 localhost:8000");
      Serial.println("3. 检查Windows防火墙是否阻止了8000端口");
      Serial.println("4. 在电脑浏览器测试：http://192.168.184.65:8000");
    }
    
    free(fullImage);
    http.end();
  }

  void serve(){
  WiFiClient client=server.available();
  if(client){
  String currentLine="",request="";
  bool headerComplete=false;
  while(client.connected()){
  if(client.available()){
  char c=client.read();
  if(c=='\n'){
  if(currentLine.length()==0){
  headerComplete=true;
  if(request.indexOf("GET /stream")>=0){
  client.println("HTTP/1.1 200 OK\nContent-Type: multipart/x-mixed-replace; boundary=frame\nConnection: keep-alive\n");
  while(client.connected()){
  camera->oneFrame();
  client.println("--frame\nContent-Type: image/bmp\nContent-Length: "+String(BMP::headerSize+camera->xres*camera->yres*2)+"\n");
  client.write(bmpHeader,BMP::headerSize);
  client.write(camera->frame,camera->xres*camera->yres*2);
  client.println();
  delay(100);
  if(!client.available()&&!client.connected())break;
  }
  break;
  }else if(request.indexOf("GET /camera")>=0){
  client.println("HTTP/1.1 200 OK\nContent-type: text/html; charset=UTF-8\nConnection: close\n");
  client.print("<!DOCTYPE html><html><head><title>ESP32 实时摄像头</title></head><body style='margin:0;background:#000;display:flex;justify-content:center;align-items:center;min-height:100vh;font-family:sans-serif'><div style='text-align:center'><h2 style='color:white;margin-bottom:20px'>ESP32 实时摄像头</h2><img id='stream' src='/stream' style='border:2px solid #333;max-width:90vw;max-height:70vh' onerror='this.src=\"/stream?t=\"+Date.now()'><div style='margin-top:20px'><button onclick='location.reload()' style='padding:10px 20px;margin:5px;background:#007bff;color:white;border:none;border-radius:5px;cursor:pointer'>🔄 刷新</button><button onclick='window.close()' style='padding:10px 20px;margin:5px;background:#6c757d;color:white;border:none;border-radius:5px;cursor:pointer'>❌ 关闭</button></div></div><script>let img=document.getElementById('stream');img.onerror=function(){setTimeout(()=>{this.src='/stream?t='+Date.now();},1000)};</script></body></html>");
  break;
  }else if(request.indexOf("GET /capture")>=0){
  client.println("HTTP/1.1 200 OK\nContent-Type: text/plain\nConnection: close\n");
  sendToServer();
  client.println("Captured and uploaded.");
  break;
  }

  else{
  client.println("HTTP/1.1 200 OK\nContent-type: text/html; charset=UTF-8\nConnection: close\n");
  client.print("<style>body{margin:0;font-family:sans-serif;padding:20px;background:#f5f5f5}.status{padding:10px;margin:10px 0;border-radius:5px;display:none}.success{background:#d4edda;color:#155724;border:1px solid #c3e6cb}.error{background:#f8d7da;color:#721c24;border:1px solid #f5c6cb}.loading{background:#d1ecf1;color:#0c5460;border:1px solid #bee5eb}</style><h1>ESP32 摄像头控制中心</h1><div id='status' class='status'></div><div style='margin:20px 0'><button id='captureBtn' onclick='capturePhoto()' style='padding:15px 30px;margin:10px;background:#28a745;color:white;border:none;border-radius:5px;cursor:pointer;font-size:16px'>📸 拍照上传</button><button onclick='window.open(\"/camera\",\"camera\",\"width=800,height=600\")' style='padding:15px 30px;margin:10px;background:#007bff;color:white;border:none;border-radius:5px;cursor:pointer;font-size:16px'>📷 实时摄像头</button><button onclick='loadGallery()' style='padding:15px 30px;margin:10px;background:#6f42c1;color:white;border:none;border-radius:5px;cursor:pointer;font-size:16px'>🖼️ 查看相册</button></div><div id='gallery'></div><script>function showStatus(message,type){const status=document.getElementById('status');status.textContent=message;status.className='status '+type;status.style.display='block';setTimeout(()=>status.style.display='none',3000)}function capturePhoto(){const btn=document.getElementById('captureBtn');btn.disabled=true;btn.textContent='📸 拍照中...';showStatus('正在拍照上传...','loading');fetch('/capture').then(response=>{if(response.ok){return response.text()}else{throw new Error('拍照失败，状态码: '+response.status)}}).then(data=>{showStatus('拍照上传成功！','success');console.log('服务器响应:',data)}).catch(error=>{showStatus('拍照失败: '+error.message,'error');console.error('拍照错误:',error)}).finally(()=>{btn.disabled=false;btn.textContent='📸 拍照上传'})}function loadGallery(){showStatus('正在加载相册...','loading');window.open('http://192.168.184.65:8000','_blank')}</script>");
  client.print("<div id='mqttData' style='padding:10px;background:#fff;border-radius:8px;box-shadow:0 2px 5px rgba(0,0,0,0.1);margin-top:20px'><h3>📡 实时传感器数据</h3><div id='mqttContent'>等待数据...</div></div>");
  client.print(R"rawliteral(
  <script>
  setInterval(()=>{
    fetch('/mqtt')
    .then(resp => resp.text())
    .then(data => {
      document.getElementById('mqttContent').textContent = data;
    });
  }, 1000);
  </script>
  )rawliteral");
  break;
  }
  }else{
  if(request.length()==0)request=currentLine;
  currentLine="";
  }
  }else if(c!='\r'){
  currentLine+=c;
  }
  }
  }
  if(request.indexOf("GET /stream")<0){
  delay(10);
  client.stop();
  }
  }
  }

  // ========== 摄像头图像 → TFT 屏幕 显示 ==========
  void displayCameraFrame()
  {
    uint16_t color;
    int index = 0;

    tft.startWrite();
    tft.setAddrWindow(0, 0, 128, 128); // 设置 TFT 128x128 显示区域

    for (int y = 0; y < 128; y++)
    {
      for (int x = 0; x < 128; x++)
      {
        int src_x = (x * camera->xres) / 128; // 映射 x
        int src_y = (y * camera->yres) / 128; // 映射 y
        index = (src_y * camera->xres + src_x) * 2;

        uint8_t byte1 = camera->frame[index];     // 低字节
        uint8_t byte2 = camera->frame[index + 1]; // 高字节
        color = (byte2 << 8) | byte1;             // RGB565 颜色格式

        tft.pushColor(color);
      }
    }
    tft.endWrite();
  }

  // ========== 设置 ==========
  void setup()
  {
    Serial.begin(115200);
    Serial.println();
    connectWifi();
    // connectMQTT();


    if (WiFi.status() == WL_CONNECTED)
    {
      startWebServer();

      // 初始化摄像头
      camera = new OV7670(OV7670::Mode::QQVGA_RGB565, SIOD, SIOC, VSYNC, HREF, XCLK, PCLK, D0, D1, D2, D3, D4, D5, D6, D7);
      BMP::construct16BitHeader(bmpHeader, camera->xres, camera->yres);
    }

    // 初始化 TFT 屏幕
    tft.init();
    tft.setRotation(0); // 方向
    tft.fillScreen(TFT_BLACK);
    tft.setTextColor(TFT_WHITE);
    tft.setTextSize(1);
    tft.setCursor(10, 10);
    tft.println("ESP32 Camera Ready!");
  }

  // ========== 主循环 ==========
  void loop()
  {

    serve();              // 处理 HTTP 服务器请求
    camera->oneFrame();   // 采集一帧摄像头画面
    displayCameraFrame(); // 显示图像到 TFT
    delay(100);           // 控制帧率
  }